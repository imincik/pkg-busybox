diff --git a/networking/udhcp/Config.src b/networking/udhcp/Config.src
index 6bfa398..c76a15d 100644
--- a/networking/udhcp/Config.src
+++ b/networking/udhcp/Config.src
@@ -152,3 +152,11 @@ config UDHCPC_SLACK_FOR_BUGGY_SERVERS
 	    maximum size of entire IP packet, and sends packets which are
 	    28 bytes too large.
 	  Seednet (ISP) VDSL: sends packets 2 bytes too large.
+
+config FEATURE_UDHCPC_FILTER
+	bool "Add udhcpc filter option ignoring all but one server"
+	default n
+	depends on UDHCPC
+	help
+	  If selected, udhcpc will have option to ignore all DHCP responses not
+	  coming from the server IP specified on command line.
diff --git a/networking/udhcp/dhcpc.c b/networking/udhcp/dhcpc.c
index 8dee916..83e01e0 100644
--- a/networking/udhcp/dhcpc.c
+++ b/networking/udhcp/dhcpc.c
@@ -86,9 +86,11 @@ enum {
 	USE_FOR_MMU(             OPTBIT_b,)
 	IF_FEATURE_UDHCPC_ARPING(OPTBIT_a,)
 	IF_FEATURE_UDHCP_PORT(   OPTBIT_P,)
++	IF_FEATURE_UDHCPC_FILTER(OPTBIT_I,)
 	USE_FOR_MMU(             OPT_b = 1 << OPTBIT_b,)
 	IF_FEATURE_UDHCPC_ARPING(OPT_a = 1 << OPTBIT_a,)
 	IF_FEATURE_UDHCP_PORT(   OPT_P = 1 << OPTBIT_P,)
+	IF_FEATURE_UDHCPC_FILTER(OPT_I = 1 << OPTBIT_I,)
 };
 
 
@@ -1181,6 +1183,9 @@ static void client_background(void)
 //usage:     "\n	-F,--fqdn NAME		Ask server to update DNS mapping for NAME"
 //usage:     "\n	-V,--vendorclass VENDOR	Vendor identifier (default 'udhcp VERSION')"
 //usage:     "\n	-C,--clientid-none	Don't send MAC as client identifier"
+//usage:	IF_FEATURE_UDHCPC_FILTER(
+//usage:     "\n	-I,--server-filter IP	Ignore responses from servers other than given one"
+//usage:	)
 //usage:	IF_UDHCP_VERBOSE(
 //usage:     "\n	-v			Verbose"
 //usage:	)
@@ -1218,6 +1223,9 @@ static void client_background(void)
 //usage:     "\n	-F NAME		Ask server to update DNS mapping for NAME"
 //usage:     "\n	-V VENDOR	Vendor identifier (default 'udhcp VERSION')"
 //usage:     "\n	-C		Don't send MAC as client identifier"
+//usage:	IF_FEATURE_UDHCPC_FILTER(
+//usage:     "\n	-I		Ignore responses from servers other than given one"
+//usage:	)
 //usage:	IF_UDHCP_VERBOSE(
 //usage:     "\n	-v		Verbose"
 //usage:	)
@@ -1233,6 +1241,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 	uint8_t *temp, *message;
 	const char *str_V, *str_h, *str_F, *str_r;
 	IF_FEATURE_UDHCP_PORT(char *str_P;)
+	IF_FEATURE_UDHCPC_FILTER(const char *str_I;)
 	void *clientid_mac_ptr;
 	llist_t *list_O = NULL;
 	llist_t *list_x = NULL;
@@ -1249,6 +1258,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 	int max_fd;
 	int retval;
 	fd_set rfds;
+	IF_FEATURE_UDHCPC_FILTER(uint32_t server_filter_addr;)
 
 	/* Default options */
 	IF_FEATURE_UDHCP_PORT(SERVER_PORT = 67;)
@@ -1274,6 +1284,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 		, &list_x
 		IF_FEATURE_UDHCP_PORT(, &str_P)
 		IF_UDHCP_VERBOSE(, &dhcp_verbose)
+		IF_FEATURE_UDHCPC_FILTER("server-filter\0" Required_argument "I")
 	);
 	if (opt & (OPT_h|OPT_H)) {
 		//msg added 2011-11
@@ -1326,6 +1337,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 		if (colon)
 			*colon = ' ';
 		/* now it looks similar to udhcpd's config file line:
+		IF_FEATURE_UDHCPC_FILTER("I:")
 		 * "optname optval", using the common routine: */
 		udhcp_str2optset(optstr, &client_config.options);
 	}
@@ -1334,6 +1346,7 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 			&client_config.ifindex,
 			NULL,
 			client_config.client_mac)
+		IF_FEATURE_UDHCPC_FILTER(, &str_I)
 	) {
 		return 1;
 	}
@@ -1368,6 +1381,17 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 		logmode |= LOGMODE_SYSLOG;
 	}
 
+#if ENABLE_FEATURE_UDHCPC_FILTER
+	if (opt & OPT_I) {
+		struct in_addr temp_addr;
+		if(inet_aton(str_I, &temp_addr)) {
+			server_filter_addr = temp_addr.s_addr;
+		} else {
+			bb_perror_msg_and_die("server filter address can't be parsed:%s",str_I);
+		}
+	}
+#endif
+
 	/* Make sure fd 0,1,2 are open */
 	bb_sanitize_stdio();
 	/* Equivalent of doing a fflush after every \n */
@@ -1628,6 +1652,12 @@ int udhcpc_main(int argc UNUSED_PARAM, char **argv)
 			continue;
 		}
 
+#if ENABLE_FEATURE_UDHCPC_FILTER
+		if (packet.siaddr_nip != server_filter_addr) {
+			log1("siaddr_nip %x does not match our server %x, ignoring packet",packet.siaddr_nip, server_filter_addr);
+			continue;
+		}
+#endif
 		message = udhcp_get_option(&packet, DHCP_MESSAGE_TYPE);
 		if (message == NULL) {
 			bb_error_msg("no message type option, ignoring packet");
